import React, { useEffect, useState } from 'react';
import {
  useParticipants,
  useTracks,
  useRoomContext,
  useLocalParticipant,
  LayoutContextProvider,
} from '@livekit/components-react';
import { Track, ConnectionState } from 'livekit-client';
import VideoArea from '../VideoArea';
import VideoControlBar from '../VideoControlBar';
import styles from './CustomVideoConference.module.scss';

function CustomVideoConference(props) {
  return (
    <LayoutContextProvider>
      <CustomVideoConferenceInner {...props} />
    </LayoutContextProvider>
  );
}

function CustomVideoConferenceInner(props) {
  const room = useRoomContext();
  const participants = useParticipants();
  const { localParticipant } = useLocalParticipant();
  const [isControlBarVisible, setIsControlBarVisible] = useState(true);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const tracks = useTracks(
    [
      { source: Track.Source.Camera, withPlaceholder: true },
      { source: Track.Source.ScreenShare, withPlaceholder: false },
    ],
    { onlySubscribed: false }
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (room && room.state === ConnectionState.Connected && localParticipant) {
      const enableDevices = async () => {
        try {
          console.log('üé¨ –í–∫–ª—é—á–∞—é –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
          await localParticipant.setCameraEnabled(false);
          await localParticipant.setMicrophoneEnabled(false);
          console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω—ã');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        }
      };
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      setTimeout(enableDevices, 1000);
    }
  }, [room, localParticipant]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('üé• Tracks:', tracks);
    console.log('üë• Participants:', participants);
    console.log('üè† Room state:', room?.state);
    console.log('üë§ Local participant:', localParticipant);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–∞—Ö
    tracks.forEach((track, index) => {
      console.log(`Track ${index}:`, {
        source: track.source,
        participant: track.participant?.identity,
        publication: track.publication,
        isSubscribed: track.publication?.isSubscribed,
        isMuted: track.publication?.isMuted,
        track: track.publication?.track
      });
    });
  }, [tracks, participants, room, localParticipant]);

  const handleDisconnect = () => {
    room?.disconnect();
  };

  const toggleControlBar = () => {
    setIsControlBarVisible(!isControlBarVisible);
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
  if (!room || room.state !== ConnectionState.Connected) {
    return (
      <div className={styles.videoConference}>
        <div className={styles.loadingContainer}>
          <div className={styles.loadingSpinner}></div>
          <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.videoConference} {...props}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–µ–æ */}
      <VideoArea tracks={tracks} />

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <VideoControlBar 
        isControlBarVisible={isControlBarVisible}
        onToggleControlBar={toggleControlBar}
        onDisconnect={handleDisconnect}
      />
    </div>
  );
}

export default CustomVideoConference; 