import React, { useState, useEffect } from 'react';
import {
  ParticipantTile,
  GridLayout,
  RoomAudioRenderer,
} from '@livekit/components-react';
import { Track } from 'livekit-client';
import styles from './VideoArea.module.scss';

function VideoArea({ tracks }) {
  const [fullscreenTrack, setFullscreenTrack] = useState(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'Escape' && fullscreenTrack) {
        setFullscreenTrack(null);
      }
    };

    if (fullscreenTrack) {
      document.addEventListener('keydown', handleKeyPress);
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.removeEventListener('keydown', handleKeyPress);
      document.body.style.overflow = 'unset';
    };
  }, [fullscreenTrack]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–∫—Ä–∞–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
  const screenShareTracks = tracks.filter(
    (track) => track.source === Track.Source.ScreenShare
  );
  const hasScreenShare = screenShareTracks.length > 0;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const mainTracks = tracks.filter(
    (track) => track.source === Track.Source.Camera
  );

  console.log('üì∫ Main tracks:', mainTracks);
  console.log('üñ•Ô∏è Screen share tracks:', screenShareTracks);

  const handleParticipantClick = (trackRef) => {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    if (fullscreenTrack && fullscreenTrack.participant.identity === trackRef.participant.identity) {
      setFullscreenTrack(null); // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    } else {
      setFullscreenTrack(trackRef); // –í—Ö–æ–¥–∏–º –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    }
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
  if (fullscreenTrack) {
    return (
      <div className={styles.videoArea}>
        <RoomAudioRenderer />
        <div className={styles.fullscreenContainer}>
          <div className={styles.fullscreenVideo}>
            <ParticipantTile 
              trackRef={fullscreenTrack}
              onParticipantClick={() => setFullscreenTrack(null)}
            />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.videoArea}>
      {/* –†–µ–Ω–¥–µ—Ä–µ—Ä –∞—É–¥–∏–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
      <RoomAudioRenderer />
      
      {hasScreenShare ? (
        // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–∫—Ä–∞–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –≤ —Ü–µ–Ω—Ç—Ä–µ
        <div className={styles.screenShareContainer}>
          <GridLayout tracks={screenShareTracks}>
            <ParticipantTile 
              onParticipantClick={(event) => {
                const trackRef = screenShareTracks.find(track => 
                  track.participant.identity === event.participant.identity
                );
                if (trackRef) handleParticipantClick(trackRef);
              }}
            />
          </GridLayout>
          {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ */}
          <div className={styles.participantGrid}>
            <GridLayout tracks={mainTracks}>
              <ParticipantTile 
                onParticipantClick={(event) => {
                  const trackRef = mainTracks.find(track => 
                    track.participant.identity === event.participant.identity
                  );
                  if (trackRef) handleParticipantClick(trackRef);
                }}
              />
            </GridLayout>
          </div>
        </div>
      ) : (
        // –û–±—ã—á–Ω–∞—è —Å–µ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        <GridLayout tracks={mainTracks}>
          <ParticipantTile 
            onParticipantClick={(event) => {
              const trackRef = mainTracks.find(track => 
                track.participant.identity === event.participant.identity
              );
              if (trackRef) handleParticipantClick(trackRef);
            }}
          />
        </GridLayout>
      )}
    </div>
  );
}

export default VideoArea; 