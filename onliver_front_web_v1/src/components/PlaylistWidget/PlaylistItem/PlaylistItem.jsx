import React, { useState, useEffect, useRef } from 'react';
import styles from './PlaylistItem.module.scss';
import ElipsisDragIcon from '../../../assets/icons/ElipsisDragIcon';
import PlayIcon from '../../../assets/icons/PlayIcon';
import DeleteIcon from '../../../assets/icons/DeleteIcon';
import UpIcon from '../../../assets/icons/UpIcon';
import DownIcon from '../../../assets/icons/DownIcon';
import UpDownIcon from '../../../assets/icons/UpDownIcon';



// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
function PlaylistItem({ 
  item, 
  index, 
  totalItems,
  isCurrentItem, 
  playlistStatus,
  onStart, 
  onRemove,
  onMove,
  onQuickMove,
  onDragStart,
  onDragEnd,
  onDragStateChange,
  isDragMode,
  contentInfo,
  loadingContent 
}) {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [touchStartY, setTouchStartY] = useState(0);
  const [touchCurrentY, setTouchCurrentY] = useState(0);
  const [isTouchDragging, setIsTouchDragging] = useState(false);
  
  const itemRef = useRef(null);
  const touchTimeoutRef = useRef(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–µ–Ω—Å–æ—Ä–Ω—ã–º
  const isTouchDevice = () => {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
  };

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    setImageLoaded(false);
    setImageError(false);
  }, [contentInfo]);

  const handleImageLoad = () => {
    setImageLoaded(true);
    setImageError(false);
  };

  const handleImageError = () => {
    setImageLoaded(false);
    setImageError(true);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —è—á–µ–π–∫—É (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
  const canStart = playlistStatus !== 'ACTIVE';

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag —Å–æ–±—ã—Ç–∏–π
  const handleDragStart = (e) => {
    console.log('PlaylistItem: –Ω–∞—á–∞–ª–æ drag', item);
    setIsDragging(true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è drag –æ–ø–µ—Ä–∞—Ü–∏–∏
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', item.cellId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onDragStart) {
      onDragStart(item, index);
    }
    if (onDragStateChange) {
      onDragStateChange(true);
    }
  };

  const handleDragEnd = (e) => {
    console.log('PlaylistItem: –∫–æ–Ω–µ—Ü drag', item);
    setIsDragging(false);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onDragEnd) {
      onDragEnd();
    }
    if (onDragStateChange) {
      onDragStateChange(false);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  const handleMoveUp = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (onQuickMove && index > 0) {
      onQuickMove(item.cellId, index - 1);
    }
  };

  const handleMoveDown = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (onQuickMove && index < totalItems - 1) {
      onQuickMove(item.cellId, index + 1);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (touchTimeoutRef.current) {
        clearTimeout(touchTimeoutRef.current);
      }
      document.body.style.overflow = '';
    };
  }, []);

  return (
    <>
      <div 
        ref={itemRef}
        className={`${styles.playlistItem} ${isCurrentItem ? styles.current : ''} ${isDragging ? styles.dragging : ''}`}
        draggable={true}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
        onDragOver={handleDragOver}
        style={isTouchDragging ? {
          transform: `translateY(${touchCurrentY - touchStartY}px)`,
          zIndex: 1000,
          transition: 'none'
        } : {}}
      >
        {/* –ò–∫–æ–Ω–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */}
        <div className={styles.dragHandle}>
          <ElipsisDragIcon />
          {/* Fallback –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è */}
          <span className={styles.dragHandleFallback}>‚ãÆ‚ãÆ</span>
        </div>

        {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <div className={styles.itemIcon}>
          {loadingContent ? (
            <div className={styles.loadingSpinner}></div>
          ) : contentInfo ? (
            <>
              {!imageError && (
                <img 
                  src={contentInfo.avatarUrl} 
                  alt={contentInfo.name}
                  onLoad={handleImageLoad}
                  onError={handleImageError}
                  style={{ display: imageLoaded ? 'block' : 'none' }}
                />
              )}
              {(!imageLoaded || imageError) && (
                <div className={styles.iconPlaceholder}>üé¨</div>
              )}
            </>
          ) : (
            <div className={styles.iconPlaceholder}>‚ö†Ô∏è</div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ */}
        <div className={styles.itemInfo}>
          {loadingContent ? (
            <>
              <div className={styles.itemTitle}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              <div className={styles.itemDescription}>
                Index: {index} | Cell ID: {item.cellId}
                {isCurrentItem && ' | CURRENT'}
              </div>
            </>
          ) : contentInfo ? (
            <>
              <div className={styles.itemTitle}>{contentInfo.name}</div>
              <div className={styles.itemDescription}>
                {contentInfo.description}
              </div>
            </>
          ) : (
            <>
              <div className={styles.itemTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
              <div className={styles.itemDescription}>
                Index: {index} | Cell ID: {item.cellId} | Content ID: {item.contentId}
                {isCurrentItem && ' | CURRENT'}
              </div>
            </>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {isTouchDevice() && (
          <div className={styles.touchMoveButtons}>
            <button 
              className={`${styles.moveButton} ${styles.moveUpButton} ${index === 0 ? styles.disabled : ''}`}
              onClick={handleMoveUp}
              onMouseDown={(e) => e.stopPropagation()}
              onTouchStart={(e) => e.stopPropagation()}
              disabled={index === 0}
              title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
            >
              <UpIcon />
            </button>
            <button 
              className={`${styles.moveButton} ${styles.moveDownButton} ${index === totalItems - 1 ? styles.disabled : ''}`}
              onClick={handleMoveDown}
              onMouseDown={(e) => e.stopPropagation()}
              onTouchStart={(e) => e.stopPropagation()}
              disabled={index === totalItems - 1}
              title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
            >
              <DownIcon />
            </button>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
        <button 
          className={`${styles.playButton} ${!canStart ? styles.disabled : ''}`}
          onClick={() => canStart && onStart(item.cellId)}
          onMouseDown={(e) => e.stopPropagation()}
          onTouchStart={(e) => e.stopPropagation()}
          disabled={!canStart}
          title={canStart ? "–ó–∞–ø—É—Å—Ç–∏—Ç—å" : "–ù–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–≥–¥–∞ –ø–ª–µ–π–ª–∏—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω"}
        >
          <PlayIcon />
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
        <button 
          className={styles.deleteButton}
          onClick={() => onRemove(item.cellId)}
          onMouseDown={(e) => e.stopPropagation()}
          onTouchStart={(e) => e.stopPropagation()}
          title="–£–¥–∞–ª–∏—Ç—å"
        >
          <DeleteIcon />
        </button>
      </div>
    </>
  );
}

export default PlaylistItem; 